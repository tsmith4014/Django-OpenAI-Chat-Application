

# Forms
from django import forms
DEFAULT_TEMPERATURE = 1.0
DEFAULT_TOP_P = 0.9

def get_temperature_choices():
    return (
        (0.0, '0.0 - Least Creative'),
        (0.25, '0.25'),
        (0.5, '0.5'),
        (0.75, '0.75'),
        (1.0, '1.0'),
        (1.25, '1.25'),
        (1.5, '1.5'),
        (1.75, '1.75'),
        (2.0, '2.0 - Most Creative'),
    )

def get_top_p_choices():
    return (
        (0.0, '0.0 - Least Diverse'),
        (0.1, '0.1'),
        (0.2, '0.2'),
        (0.3, '0.3'),
        (0.4, '0.4'),
        (0.5, '0.5- Mid-Point'),
        (0.6, '0.6'),
        (0.7, '0.7'),
        (0.8, '0.8'),
        (0.9, '0.9'),
        (1.0, '1.0 - Most Diverse'),
    )

def get_model_choices():
    return (
        ('text-davinci-002', 'Davinci-002'),
        ('code-davinci-002', 'Code Generation 8000 MAX Tokens'),
        ('text-davinci-003', 'Best Overall 4000 MAX Tokens'),
    )

class GPTRequestForm(forms.Form):
    prompt = forms.CharField(widget=forms.Textarea)
    temperature = forms.ChoiceField(choices=get_temperature_choices(), initial=DEFAULT_TEMPERATURE)
    top_p = forms.ChoiceField(choices=get_top_p_choices(), initial=DEFAULT_TOP_P)
    response_name = forms.CharField(max_length=255)
    num_tokens = forms.IntegerField()
    model = forms.ChoiceField(choices=get_model_choices())

class ImagePromptForm(forms.Form):
    prompt = forms.CharField(widget=forms.Textarea)
    n = forms.IntegerField()
    size = forms.CharField(max_length=9, initial='1024x1024')
    response_format = forms.CharField(max_length=12, initial='url')

class EditGPTSubResponseForm(forms.Form):
    # prompt = forms.CharField(max_length=100)
    prompt = forms.CharField(max_length=50)
    response = forms.CharField(
        label='Sub Response',
        widget=forms.Textarea,
        max_length=1024
    )

# models.py
from django.db import models

class GPTSub(models.Model):
    prompt = models.TextField()
    temperature = models.DecimalField(max_digits=2, decimal_places=1, default=1.0)
    top_p = models.DecimalField(max_digits=3, decimal_places=2, default=0.9)
    model = models.CharField(max_length=255)  
    num_tokens = models.IntegerField()
    response_name = models.CharField(max_length=255)
    response = models.CharField(max_length=10000)

    def __str__(self):
        return self.prompt
        
class ImagePrompt(models.Model):
    prompt = models.TextField(max_length=1000)
    n = models.PositiveSmallIntegerField(default=1)
    size = models.CharField(max_length=9, default='1024x1024')
    response_format = models.CharField(max_length=12, default='url')

    def __str__(self):
        return self.prompt

# views.py 
from django.shortcuts import render, redirect, get_object_or_404
from .models import GPTSub, ImagePrompt
from django.urls import reverse
from django.http import HttpResponse
from .forms import GPTRequestForm, get_model_choices, get_top_p_choices, get_temperature_choices, ImagePromptForm, EditGPTSubResponseForm
import openai 
import requests
import json
my_api_key = "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"
DEFAULT_TEMPERATURE = 1.0
DEFAULT_TOP_P = 0.9

def index(request):
    if request.method == 'POST':
        if request.POST.get('gpt_sub_button'):
            return redirect('gpt_sub')
        elif request.POST.get('image_prompt_button'):
            return redirect('image_prompt')
    return render(request, 'index.html')

def handle_gpt_request(request):
    if request.method == 'POST':
        form = GPTRequestForm(request.POST)
        if form.is_valid():
            prompt = form.cleaned_data['prompt']
            temperature = float(form.cleaned_data.get('temperature') or DEFAULT_TEMPERATURE)
            top_p = float(form.cleaned_data.get('top_p') or DEFAULT_TOP_P)
            model = form.cleaned_data.get('model') or 'best'
            response_name = form.cleaned_data.get('response_name')
            num_tokens = form.cleaned_data.get('num_tokens')
            # create GPTSub instance and save to the database
            gpt_request = GPTSub.objects.create(prompt=prompt, temperature=temperature, top_p=top_p, model=model,response_name=response_name,num_tokens=num_tokens)
            return redirect('gpt_response', gpt_request.pk)
    else:
        form = GPTRequestForm()
    return render(request, 'gpt_template.html', {'form': form})

def handle_gpt_response(request, pk):
    gpt_response = GPTSub.objects.get(pk=pk)
    openai.api_key = my_api_key
    response = openai.Completion.create(
        engine=gpt_response.model,
        prompt=gpt_response.prompt,
        temperature=float(gpt_response.temperature),
        top_p=float(gpt_response.top_p),
        max_tokens=gpt_response.num_tokens,
    )
    gpt_response.response = response["choices"][0]["text"]
    gpt_response.save()
    return render(request, 'gpt_response.html', {'gpt_response': gpt_response})

def list_gpt_sub_responses(request):
    gpt_sub_responses = GPTSub.objects.all()
    print(gpt_sub_responses)
    return render(request, 'gpt_sub_response_list.html', {'gpt_sub_responses': gpt_sub_responses})

def edit_gpt_sub_response(request, pk):
    gpt_sub_response = GPTSub.objects.get(pk=pk)
    form = EditGPTSubResponseForm(request.POST or None, initial={'response': gpt_sub_response.response, 'prompt': gpt_sub_response.prompt})

    if request.method == 'POST':
        if form.is_valid():
            gpt_sub_response.response = form.cleaned_data['response']
            gpt_sub_response = form.cleaned_data['prompt']
            gpt_sub_response.save()
            return redirect('gpt_sub_response_list')

    return render(request, 'gpt_sub_response_edit.html', {'form': form})

def delete_gpt_sub_response(request, pk):
    gpt_sub_response = GPTSub.objects.get(pk=pk)
    if request.method == 'POST':
        gpt_sub_response.delete()
        return redirect('gpt_sub_response_list')
    return render(request, 'gpt_sub_response_confirm_delete.html', {'gpt_sub_response': gpt_sub_response})


def handle_image_prompt_request(request):
    if request.method == 'POST':
        form = ImagePromptForm(request.POST)
        if form.is_valid():
            prompt = form.cleaned_data['prompt']
            n = form.cleaned_data['n']
            size = form.cleaned_data['size']
            response_format = form.cleaned_data['response_format']
            # Call GPT-3 API using prompt
            # and handle the response
            image_prompt = ImagePrompt.objects.create(prompt=prompt, n=n, size=size, response_format=response_format)
            return redirect('image_prompt_response', image_prompt.pk)
    else:
        form = ImagePromptForm()
    return render(request, 'image_prompt_template.html', {'form': form})

def handle_image_prompt_response(request, pk):
    image_prompt_response = ImagePrompt.objects.get(pk=pk)
    print(image_prompt_response, 'this is the image_prompt_response')
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {my_api_key}'
    }

    data = {
        'prompt': image_prompt_response.prompt,
        'n': image_prompt_response.n,
        'size': image_prompt_response.size
    }

    response = requests.post('https://api.openai.com/v1/images/generations', headers=headers, data=json.dumps(data))
    response_data = response.json()
    image_urls = [item['url'] for item in response_data['data']]
    return render(request, 'image_prompt_response.html', {'image_prompt_response': image_prompt_response, 'image_urls': image_urls})

#urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='gpt_index'),
    path('chatgpt/', views.handle_gpt_request, name='gpt_request'),
    path('chatgpt/response/<int:pk>', views.handle_gpt_response, name='gpt_response'),
    path('image_prompt/', views.handle_image_prompt_request, name='image_prompt_request'),
    path('image_prompt/response/<int:pk>', views.handle_image_prompt_response, name='image_prompt_response'),
    path('gpt_sub_responses/', views.list_gpt_sub_responses, name='gpt_sub_response_list'),
    path('gpt_sub_responses/<int:pk>/edit/', views.edit_gpt_sub_response, name='gpt_sub_response_edit'),
    path('gpt_sub_responses/<int:pk>/delete/', views.delete_gpt_sub_response, name='gpt_sub_response_delete'),
]